<!DOCTYPE html>
<html lang="en">
<head>
  <title>WebRTC_sample_node.js</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
  <script src="/socket.io/socket.io.js"></script> <!-- socket.io setting -->
</head>



<body>
  <div id="cameraSelecter">
    Video: <select id="camera"></select>
  </div>
  <video id="myVideoArea" autoplay></video>
  <video id="theirVideoArea" autoplay></video>
  <div>
    <label>Your Name:</label><input id="myName" type="text">
    <label>Message:</label><input id="myMessage" type="text">
    <input id="sendMessage" type="submit">
    <div id="chatArea">Message Output:</br></div>
    <div id="signalingArea">Signaling Messages:</br></div>
  </div>


  <script>
    // ELEMENTS
    var myVideoArea = document.getElementById('myVideoArea');
    var theirVideoArea = document.getElementById('theirVideoArea');
    var myName = document.getElementById('myName');
    var myMessage = document.getElementById('myMessage');
    var sendMessage = document.getElementById('sendMessage');
    var chatArea = document.getElementById('chatArea');
    var signalingArea = document.getElementById('signalingArea');

    var ROOM = "chat"; // 本来は個別のルームネームを設定するところ
    var SIGNAL_ROOM = "signal_room";
    var configuration = {
      'iceServers': [{
        'url': 'stun:stun.l.google.com:19302'
      }]
    };
    var rtcPeerConn;
    // var dataChannelOptions = {
    //   ordered: false, // no guaranteed delivery, unreliable but faster
    //   maxRetransmitTime: 1000,
    // };
    // var dataChannel;

    io = io.connect(); // connect to socket.io server

    // <- READY
    io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM}); // emit a message(type of 'ready') to the room(server) io.emit('MESSAGE TYPE', DATA)

    // <- SIGNAL
    io.emit('signal', {"type":"user_here", "message":"Are you ready for a call?", "room":SIGNAL_ROOM});

    // SIGNALING_MESSAGE <- let signaling started
    io.on('signaling_message', (data) => {
      displaySignalMessage("Signal received: " + data.type);

      // setup the RTC Peer Connection object
      if (!rtcPeerConn) {
        startSignaling();
      }

      if (data.type != "user_here") {
        var message = JSON.parse(data.message);
        if (message.sdp) { // after receiving OFFER
          rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), () => {
            if (rtcPeerConn.remoteDescription.type == 'offer') {
              rtcPeerConn.createAnswer(sendLocalDesc, logError);
            }
          }, logError);
        } else { // second, add ice candidate
          rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
        }
      }
    });

    // SIGNALING
    function startSignaling() {
      displaySignalMessage("starting signaling...");

      rtcPeerConn = new webkitRTCPeerConnection(configuration);
      // dataChannel = rtcPeerConn.createDataChannel('textMessages', dataChannelOptions);

      // dataChannel.onopen = dataChannelStateChanged;
      // rtcPeerConn.ondatachannel = receiveDataChannel;

      // send any ice candidates to the other peer
      // it will be triggered when RTCPeerConn got all information about peers(SDP & the number of needs)
      rtcPeerConn.onicecandidate = (evt) => { // let addicecandidate execute
        if (evt.candidate) {
          io.emit('signal',{"type":"ice candidate", "message": JSON.stringify({'candidate': evt.candidate}), "room":SIGNAL_ROOM}); // JSON.stringify converts JS object or value into json string
          displaySignalMessage("completed that ice candidate...");
        }
      };

      // let the 'negotiationneeded' event trigger offer generation
      rtcPeerConn.onnegotiationneeded = () => { // triggered when RTCPeerCon initialized with configuration
        displaySignalMessage("on negotiation called");
        rtcPeerConn.createOffer(sendLocalDesc, logError);
      };

      // once remote stream arrives, show it in the remote video element
      rtcPeerConn.onaddstream = (evt) => {
        displaySignalMessage("going to add their stream...");
        theirVideoArea.srcObject = evt.stream;
      };

      // get a local stream, show it in our video tag and add it to be sent
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
      navigator.getUserMedia({
        'audio': false,
        'video': {
          mandatory: {
            minWidth: 320,
            maxWidth: 320,
            minHeight: 180,
            maxHeight: 180
          }
        }
      }, (stream) => {
        displaySignalMessage("going to display my stream...");
        myVideoArea.srcObject = stream;
        rtcPeerConn.addStream(stream);
      }, logError);
    }

    // function dataChannelStateChanged() {
    //   if (dataChannel.readyState === 'open') {
    //     displaySignalMessage("Data Channel open");
    //     dataChannel.onmessage = receiveDataChannelMessage;
    //   }
    // }

    // function receiveDataChannel(event) {
    //   displaySignalMessage("Receiving a data channel");
    //   dataChannel = event.channel;
    //   dataChannel.onmessage = receiveDataChannelMessage;
    // }

    // function receiveDataChannelMessage(event) {
    //   displaySignalMessage("Incoming Message");
    //   displayMessage("From DataChannel: " + event.data);
    // }

    // SDP (OFFER & ANSWER)
    function sendLocalDesc(desc) {
      rtcPeerConn.setLocalDescription(desc, () => {
        displaySignalMessage("sending local description");
        io.emit('signal',{"type":"SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room":SIGNAL_ROOM}); // send SDP
      }, logError);
    }

    function logError(error) {
      displaySignalMessage(error.name + ': ' + error.message);
    }

    // ANNOUNCE <-
    io.on('announce', (data) => { // when received message type of 'announce'
      displayMessage(data.message);
    })

    // MESSAGE <-
    io.on('message', (data) => {
      displayMessage(data.author + ": " + data.message);
    })

    sendMessage.addEventListener('click', (ev) => {
      io.emit('send', {"author": myName.value, "message": myMessage.value, "room": ROOM});
      // dataChannel.send(myName.value + " says " + myMessage.value);
      ev.preventDefault();
    }, false);

    function displayMessage(message) { // update innerHTML (like appending a message)
      chatArea.innerHTML = chatArea.innerHTML + "</br>" + message;
    }

    function displaySignalMessage(message) { // update innerHTML (like appending a message)
      signalingArea.innerHTML = signalingArea.innerHTML + "</br>" + message;
    }

    // get devices
    // navigator.mediaDevices.enumerateDevices()
    // .then(function(devices) {
    //   devices.forEach(function(device) {
    //     console.log(device.kind + ": " + device.label +
    //                 " id = " + device.deviceId);
    //   });
    // })
    // .catch(function(err) {
    //   console.log(err.name + ": " + err.message);
    // });

  </script>
</body>
</html>