<!DOCTYPE html>
<html lang="en">
<head>
  <title>WebRTC_sample_node.js</title>
  <link rel="stylesheet" type="text/css" href="css/styles.css">
</head>
<body>
  <div>
    Video: <select id="camera"></select>
  </div>
  <p><button id="takeProfilePicture" type="button" autofocus="true">プロフィール画像を作る</button></p>
  <video id="videoTag" autoplay></video>
  <!-- <canvas id="profilePicCanvas" style="display: none;"></canvas>
  <div>
    <img id="profilePictureOutput">
  </div> -->

  <script>
    // ELEMENTS
    var videoArea = document.querySelector("video");
    var videoSelect = document.getElementById('camera');
    // var profilePicCanvas = document.getElementById('profilePicCanvas');
    // var profilePictureOutput = document.getElementById('profilePictureOutput');
    // var takePicButton = document.getElementById('takeProfilePicture');
    // var videoTag = document.getElementById('videoTag');

    // // VALUES
    // var width = 240; // Desired width of the profile picture
    // var height = 0; // Calculated later based on image ratio
    // var streaming = false; // Used to determine when the video has loaded

    // takePicButton.addEventListener('click', (ev) => {
    //   takeProfilePic();
    //   ev.preventDefault();
    // }, false);

    // videoTag.addEventListener('canplay', (ev) => {
    //   if (!streaming) {
    //     height = videoTag.videoHeight / (videoTag.videoWidth/width);
    //   }

    //   // when browser couldnt read height
    //   if (isNaN(height)) {
    //     height = width / (4/3);
    //   }

    //   // setAttributes
    //   videoTag.setAttribute('width', width);
    //   videoTag.setAttribute('height', height);
    //   profilePicCanvas.setAttribute('width', width);
    //   profilePicCanvas.setAttribute('height', height);
    //   streaming = true;
    // });

    // function takeProfilePic() {
    //   var context = profilePicCanvas.getContext('2d');
    //   if (width && height) {
    //     profilePicCanvas.width = width;
    //     profilePicCanvas.height = height;
    //     context.drawImage(videoTag, 0, 0, width, height);

    //     var data = profilePicCanvas.toDataURL('image/png');
    //     profilePictureOutput.setAttribute('src', data);
    //   }
    // }

    // MediaStreamTrack.getSources(getCameras); // 使用不可

    // get devices
    navigator.mediaDevices.enumerateDevices()
    .then(function(devices) {
      devices.forEach(function(device) {
        console.log(device.kind + ": " + device.label +
                    " id = " + device.deviceId);
      });
      getCameras(devices);
    })
    .catch(function(err) {
      console.log(err.name + ": " + err.message);
    });

    videoSelect.onchange = startStream;

    startStream();

    function getCameras(devices) { // 使用可能なカメラがselect tag に表示される
      for (var i = 0; i !== devices.length; i++) {
        var device = devices[i];
        var option = document.createElement('option');
        option.value = device.deviseId;
        if (device.kind === 'videoinput') {
          option.text = device.label || 'camera' + (videoSelect.length + 1);
          videoSelect.appendChild(option);
        }
      }
    }

    function startStream() {
      // reference
      navigator.getUserMedia = navigator.getUserMedia || navigetor.webkitGetUserMedia || navigator.mozGetUserMedia;
      // video source
      var videoSource = videoSelect.value;
      // basic constraints
      var constraints = {
        audio: false,
        video: false
        // video: {
        //   mandatory: { // Change size HERE
        //     maxWidth: 240,
        //     maxHeight: 240
        //     // minW, minH are also available
        //     // choose size by Chrome resolutions
        //   },
        //   option: [{
        //     sourceId: videoSource
        //   }]
        // }
    };
      navigator.getUserMedia(constraints, onSuccess, onError);
    }

    // success
    function onSuccess(stream) {
      console.log("Success! We have a stream!!");
      // videoArea.src = window.URL.createObjectURL(stream); ERROR::NOT SUPPORTED
      videoArea.srcObject = stream; // Worked:)
      // videoArea.classList.add('grayscale_filter'); // 色フィルター for fun
      videoArea.play();
    }

    // error
    function onError(error) {
      console.log("Error getting user media:", error);
      console.log("カメラを許可してページを再読み込みしてください");
    }
  </script>
</body>
</html>